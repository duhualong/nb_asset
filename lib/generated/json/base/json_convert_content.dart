// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:nbassetentry/common/model/nb_param_entity.dart';
import 'package:nbassetentry/generated/json/nb_param_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case NbParamEntity:
			return nbParamEntityFromJson(data as NbParamEntity, json) as T;			case NbParamDeviceParam:
			return nbParamDeviceParamFromJson(data as NbParamDeviceParam, json) as T;			case NbParamDeviceParamLampStatu:
			return nbParamDeviceParamLampStatuFromJson(data as NbParamDeviceParamLampStatu, json) as T;			case NbParamCandidateItems:
			return nbParamCandidateItemsFromJson(data as NbParamCandidateItems, json) as T;			case NbParamCandidateItemsGroupList:
			return nbParamCandidateItemsGroupListFromJson(data as NbParamCandidateItemsGroupList, json) as T;			case NbParamCandidateItemsCarrierList:
			return nbParamCandidateItemsCarrierListFromJson(data as NbParamCandidateItemsCarrierList, json) as T;			case NbParamCandidateItemsProviderList:
			return nbParamCandidateItemsProviderListFromJson(data as NbParamCandidateItemsProviderList, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case NbParamEntity:
			return nbParamEntityToJson(data as NbParamEntity);			case NbParamDeviceParam:
			return nbParamDeviceParamToJson(data as NbParamDeviceParam);			case NbParamDeviceParamLampStatu:
			return nbParamDeviceParamLampStatuToJson(data as NbParamDeviceParamLampStatu);			case NbParamCandidateItems:
			return nbParamCandidateItemsToJson(data as NbParamCandidateItems);			case NbParamCandidateItemsGroupList:
			return nbParamCandidateItemsGroupListToJson(data as NbParamCandidateItemsGroupList);			case NbParamCandidateItemsCarrierList:
			return nbParamCandidateItemsCarrierListToJson(data as NbParamCandidateItemsCarrierList);			case NbParamCandidateItemsProviderList:
			return nbParamCandidateItemsProviderListToJson(data as NbParamCandidateItemsProviderList);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'NbParamEntity':
			return NbParamEntity().fromJson(json);			case 'NbParamDeviceParam':
			return NbParamDeviceParam().fromJson(json);			case 'NbParamDeviceParamLampStatu':
			return NbParamDeviceParamLampStatu().fromJson(json);			case 'NbParamCandidateItems':
			return NbParamCandidateItems().fromJson(json);			case 'NbParamCandidateItemsGroupList':
			return NbParamCandidateItemsGroupList().fromJson(json);			case 'NbParamCandidateItemsCarrierList':
			return NbParamCandidateItemsCarrierList().fromJson(json);			case 'NbParamCandidateItemsProviderList':
			return NbParamCandidateItemsProviderList().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'NbParamEntity':
			return List<NbParamEntity>();			case 'NbParamDeviceParam':
			return List<NbParamDeviceParam>();			case 'NbParamDeviceParamLampStatu':
			return List<NbParamDeviceParamLampStatu>();			case 'NbParamCandidateItems':
			return List<NbParamCandidateItems>();			case 'NbParamCandidateItemsGroupList':
			return List<NbParamCandidateItemsGroupList>();			case 'NbParamCandidateItemsCarrierList':
			return List<NbParamCandidateItemsCarrierList>();			case 'NbParamCandidateItemsProviderList':
			return List<NbParamCandidateItemsProviderList>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}